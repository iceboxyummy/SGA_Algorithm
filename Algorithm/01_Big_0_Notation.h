#pragma once

 // 01_Big_0_Notation.h

/*
   ※ 시간 복잡도와 공간 복잡도
      ㅁ 시간 복잡도(Time Complexity)
         ㄴ 알고리즘이 문제를 해결하기 위한 연산 횟수

      ㅁ 공간 복잡도(Space Complexity)
         ㄴ 알고리즘을 사용할 때 필요한 메모리 공간
         ㄴ 요즘은 용량이 커져 크게 중요하지 않음

      -> 두 복잡도를 점근적 표기법을 사용해 표현한다.

   ※ 점근적 표기법(Asymptotic Notation)
      ㄴ 어떤 함수의 증가 양상을 다른 함수와의 비교로 표현하는 방법
      ㄴ 빅오, 빅오메가, 빅세타 등등이 있다.

      ㅁ 빅오(Big-O) 표기법
         ㄴ 해당 알고리즘이 최소한 빅오로 표현된 시간보다는 빠르다.

      ㅁ 빅오메가(Big-Omega) 표기법
         ㄴ 해당 알고리즘이 빨라봐야 빅오메가로 표현된 시간보다는 느리다.

      ㅁ 빅세타(Big-Theta) 표기법
         ㄴ 해당 알고리즘이 빅세타랑 비슷하다.

      -> 시간 복잡도를 표기할 때는 최악의 경우를 고려하기 때문에 빅오 표기법을 사용

   ※ 일반적인 빅오 표기법
      ㄴ 순위가 높을수록 효율이 좋다, 여기서 n은 데이터의 개수를 의미한다.
         - 1. O(1) : 상수시간 복잡도       : 데이터 개수가 많아져도 연산횟수는 동일
         - 2. O(log(n)) : 로그 시간 복잡도 : 데이터 개수가 많아지면 연산이 많아지지만 연산 횟수 증가가 갈수록 적음
         - 3. O(n) : 선형 시간 복잡도      : 데이터 개수가 많아짐에 따라 연산 횟수가 선형으로 늘어감
         - 4. O(n log(n)) : 선형 로그 시간 복잡도 : 선형시간 복잡도를 n번 반복하는것 퀵정렬
         - 5. O(n^2) : 2차 시간 복잡도     : 2중 for문
         - 6. O(n^3) : 3차 시간 복잡도     : 3중 for문
         - 7. O(c^n) : 지수 시간 복잡도    : 한번의 문제를 하기위해 다수의 문제를 해결해야 하는 것 ex) 피보나치 수열

      ㄴ 빅오 표기법을 표기할 때는 상대적으로 중요하지 않은 것을 제외하여 표기한다.
*/